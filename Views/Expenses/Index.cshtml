@model IEnumerable<Expense_Manager.Models.Expense>


@{
    ViewData["Title"] = "Index";
    var limits = TempData["limit"] as List<ExpenseLimit>;
    
}



<h1>Index</h1>
<div class="form-box border border-4 border-success bg-success table-borderless">
    <form asp-action="Search" method="post" class="form-inline m-4">
        <div class="form-group row">
            <label for="Name" class="col-sm-2 col-form-label">Expense Name</label>
            <div class="col-sm-4">
                <input type="text" for="Name" name="Name" class="form-control" placeholder="Name" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Type" class="col-sm-2 col-form-label">Expense Type</label>
            <div class="col-sm-4">
                <select for="Type" name="Type" class="form-control">
                    <option value="">--Select Type--</option>
                    @foreach (var item in Model.Select(x => x.ExpenseType).Distinct())
                    {
                        <option value="@item">@item</option>
                    }

                </select>

            </div>
        </div>
        <div class="form-group row">
            <label for="Amount" class="col-sm-2 col-form-label">Expense Amount Range</label>
            <div class="col-sm-4">
                <input type="number" id="AmountFrom" name="AmountFrom" class="form-control" placeholder="From" />
            </div>
            <div class="col-sm-4">
                <input type="number" id="AmountTo" name="AmountTo" class="form-control" placeholder="To" />
            </div>
            <div class="col-sm-2">
                <span id="amountError" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group row">
            <label for="Date" class="col-sm-2 col-form-label">Expense Date Range</label>
            <div class="col-sm-4">
                <input type="date" id="DateFrom" name="DateFrom" class="form-control" placeholder="From" />
            </div>
            <div class="col-sm-4">
                <input type="date" id="DateTo" name="DateTo" class="form-control" placeholder="To" />
            </div>
            <div class="col-sm-2">
                <span id="dateError" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-10">
                <button type="submit" class="btn btn-primary mt-2 mb-1">Search</button>
            </div>
        </div>
    </form>
</div>


<p>
    <a asp-action="Create" class="btn btn-primary mt-2">Create New</a>
</p>

 <div class="form-group row">
    <label for="graph" class="col-sm-2" col-form-label">Graph Type</label>
    <div class="col-sm-2">
        <select id="graph" class="form-control">
            <option value="">--Select Value--</option>
            <option value="bar">Bar Chart</option>
            <option value="dots">Dot Chart</option>
        </select>
    </div>
</div>


<!-- HTML canvas element to render the chart -->
<canvas id="expenseChart" width="600" height="400"></canvas>

@section Scripts {
    <script>
        console.log(limits)
        $(document).ready(function () {
            $("form").submit(function (event) {
                var amountFrom = parseInt($("#AmountFrom").val());
                var amountTo = parseInt($("#AmountTo").val());
                var dateFrom = parseInt($("#DateFrom").val());
                var dateTo = parseInt($("#DateTo").val());

                if (amountFrom > amountTo) {
                    $("#amountError").text("From value must be smaller than or equal to To value");
                    event.preventDefault(); // Prevent form submission
                } else {
                    $("#amountError").text(""); // Clear the error message
                }

                if (dateFrom > dateTo) {
                    $("#dateError").text("From value must be smaller than or equal to To value");
                    event.preventDefault(); // Prevent form submission
                } else {
                    $("#dateError").text(""); // Clear the error message
                }
            });
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <!-- Chart.js adapter for Moment.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-adapter-moment/1.0.1/chartjs-adapter-moment.min.js"></script>
    <script>

        // Create the chart
        var ctx = document.getElementById('expenseChart').getContext('2d');
        var expenses = @Html.Raw(Json.Serialize(Model));
        var chart = null;
        var expenseType = [];
        function createBarChart(expense) {
            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Expense Amount',
                        data: [],
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });


            // Extract the required data for the chart
            
            var expenseAmounts = [];
            var expenseTyp = [];
            // Iterate over expenses
            for (var i = 0; i < expense.length; i++) {
                var expens = expense[i];
                var index = expenseTyp.indexOf(expens.expenseType);

                // If expense type already exists in expenseType array
                if (index > -1) {
                    // Add the expense amount to the existing bar
                    expenseAmounts[index] += expens.expenseAmount;
                } else {
                    // Add a new expense type and expense amount
                    expenseTyp.push(expens.expenseType);
                    expenseAmounts.push(expens.expenseAmount);
                }
            }

            // Update the chart data and labels
            chart.data.labels = expenseTyp;
            chart.data.datasets[0].data = expenseAmounts;
            expenseType = expenseTyp;

            // Update the chart
            chart.update();
        }

        // Function to create and update the Dot Chart
        function createDotChart(expense) {
            chart = new Chart(ctx, {
                type: 'scatter', // Change the chart type to "scatter"
                data: {
                    datasets: [],
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day', // Set the desired time unit, e.g., 'day', 'month', 'year', etc.
                               
                                displayFormats: {
                                    day: 'MMM D', // Set the display format for the x-axis labels
                                }
                            },
                            
                            position: 'bottom'
                        }
                    }
                }
            });


            var colorMap = new Map();;
          
          if(expenseType){
                for (var item in expenseType){
                    type = expenseType[item]
                    var chardataset = {
                        label: type,
                        data: [],
                        backgroundColor: [], // Provide an empty array for background colors
                        pointRadius: 5, // Adjust the size of the dots
                    }

                    var data= [];
                    expense.map(function (expens) {
                        const subdata = {
                            x: moment(expens.expenseDate), // Parse the date string to a Date object
                            y: expens.expenseAmount
                        }


                        if (expens.expenseType == type) {
                            data.push(subdata)
                            
                        }
                    })

                    var color = generateColorFromString()
                    while (colorMap.has(color)){
                        color = generateColorFromString()
                    }
                    colorMap.set(color,type);

                    chardataset.data = data;
                    chardataset.backgroundColor = color;

                    chart.data.datasets.push(chardataset)
                }
                
          }

            chart.update();
        }

        function generateColorFromString() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
        

        // Function to update the chart based on the selected graph type
        function updateChart(graphVal) {
            if (chart) {
                chart.destroy(); // Destroy the existing chart if it exists
            }

            if (graphVal === "bar") {
                createBarChart(expenses);
            } else if (graphVal === "dots") {
                createDotChart(expenses);
            }
        }

        // Initial chart creation
        updateChart("bar");

        // Bind the change event using the .on() method to handle future elements
        $('#graph').on('change', function () {
            var graphVal = $(this).val();
            updateChart(graphVal);
        });
              

          
       
    </script>
}
